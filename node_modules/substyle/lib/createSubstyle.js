'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _compose2 = require('lodash/fp/compose');

var _compose3 = _interopRequireDefault(_compose2);

var _filter2 = require('lodash/fp/filter');

var _filter3 = _interopRequireDefault(_filter2);

var _isArray2 = require('lodash/isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _isPlainObject2 = require('lodash/isPlainObject');

var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _compact2 = require('lodash/compact');

var _compact3 = _interopRequireDefault(_compact2);

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _merge2 = require('lodash/merge');

var _merge3 = _interopRequireDefault(_merge2);

var _values2 = require('lodash/values');

var _values3 = _interopRequireDefault(_values2);

var _keys2 = require('lodash/keys');

var _keys3 = _interopRequireDefault(_keys2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _defaultPropsDecorator = require('./defaultPropsDecorator');

var _defaultPropsDecorator2 = _interopRequireDefault(_defaultPropsDecorator);

var _pickStyles = require('./pickStyles');

var _filterKeys = require('./filterKeys');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var coerceSelectedKeys = function coerceSelectedKeys(select) {
  if (!select) {
    return [];
  } else if ((0, _isString3.default)(select)) {
    return [select];
  } else if ((0, _isPlainObject3.default)(select)) {
    return (0, _keys3.default)(select).reduce(function (acc, key) {
      return acc.concat(select[key] ? [key] : []);
    }, []);
  }
  return select;
};

var guessBaseClassName = function guessBaseClassName(classNames) {
  // all class names must start with the same prefix: the component's base class name
  // which will finally go to the container element
  var firstKey = classNames && (0, _keys3.default)(classNames)[0];
  return firstKey && firstKey.split('__')[0].split('--')[0];
};

var deriveClassNames = function deriveClassNames(className, elementKeys, modifierKeys) {
  // do not derive class names, if the user did not specify any class name
  if (!className) {
    return undefined;
  }

  // derive class names based using the passed modifier/element keys
  var firstClassName = className.split(' ')[0];
  var derivedClassNames = [].concat(_toConsumableArray(elementKeys.length === 0 ? modifierKeys.map(function (key) {
    return firstClassName + '--' + key.substring(1);
  }) : []), _toConsumableArray(elementKeys.map(function (key) {
    return firstClassName + '__' + key;
  })));

  // also use the provided `className` if there is no sub-element selection
  return elementKeys.length === 0 ? [className].concat(_toConsumableArray(derivedClassNames)) : derivedClassNames;
};

function createSubstyle(_ref) {
  var style = _ref.style,
      className = _ref.className,
      classNames = _ref.classNames;
  var propsDecorator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _defaultPropsDecorator2.default;

  var styleIsFunction = (0, _isFunction3.default)(style);

  var baseClassName = className || guessBaseClassName(classNames);

  var substyle = styleIsFunction ? style : function (select, defaultStyle) {
    var selectedKeys = coerceSelectedKeys(select);

    (0, _invariant2.default)((0, _isArray3.default)(selectedKeys), 'First parameter must be a string, an array of strings, ' + 'a plain object with boolean values, or a falsy value.');

    (0, _invariant2.default)(!defaultStyle || (0, _isPlainObject3.default)(defaultStyle), 'Optional second parameter must be a plain object.');

    var modifierKeys = (0, _filter3.default)(_filterKeys.isModifier, selectedKeys);
    var elementKeys = (0, _filter3.default)(_filterKeys.isElement, selectedKeys);

    var collectElementStyles = elementKeys.length > 0 ? function (fromStyle) {
      return (0, _values3.default)((0, _pickStyles.pickNestedStyles)(fromStyle, elementKeys));
    } : function (fromStyle) {
      return [fromStyle];
    };

    var collectSelectedStyles = (0, _compose3.default)(collectElementStyles, function (fromStyle) {
      return (0, _pickStyles.hoistModifierStylesRecursive)(fromStyle, modifierKeys);
    });

    var derivedClassNames = deriveClassNames(baseClassName, elementKeys, modifierKeys);

    return createSubstyle(_extends({}, (style || defaultStyle) && {
      style: _merge3.default.apply(undefined, [{}].concat(_toConsumableArray(collectSelectedStyles(defaultStyle)), _toConsumableArray(collectSelectedStyles(style))))
    }, derivedClassNames && {
      className: derivedClassNames.join(' ')
    }, classNames && { classNames: classNames }), propsDecorator);
  };

  var styleProps = _extends({}, styleIsFunction ? style : { style: style });
  var classNameSplitted = [].concat(_toConsumableArray(styleProps.className ? styleProps.className.split(' ') : []), _toConsumableArray(baseClassName ? baseClassName.split(' ') : []));
  var mappedClassNames = classNames ? (0, _compact3.default)(classNameSplitted.map(function (singleClassName) {
    return classNames[singleClassName];
  })) : classNameSplitted;

  var propsForSpread = propsDecorator(_extends({}, styleProps, mappedClassNames.length > 0 && {
    className: mappedClassNames.join(' ')
  }));

  // assign `style` and/or `className` props to the return function object
  (0, _assign3.default)(substyle, propsForSpread);
  return substyle;
}

exports.default = createSubstyle;
module.exports = exports['default'];